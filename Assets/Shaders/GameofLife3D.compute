#pragma kernel UpdateCell

struct Cell
{
    float3 position;
    float3 velocity;
    float4 color;
    float4 emission;
    int state;
    int display;
    float scale;
};

RWStructuredBuffer<Cell> CellBuffer;
RWStructuredBuffer<Cell> CellBufferWrite;

float _DeltaTime;
int _Columns;
int _Rows;
int _Generation;
int _GenerationCount;
int _Threshold;
float _Drag;
float3 _Gravity;
float4 _BirthColor;
float4 _DeathColor;
float4 _StayAliveColor;
float4 _Emission;


int get_cell_count()
{
    return _Columns * _Rows * _GenerationCount;
}

// セルが一番上の世代に属するか
bool is_generation_top(uint idx)
{
    return idx > get_cell_count() - _Columns * _Rows;
}

// セルを崩壊させるかどうか
bool is_collapses(uint idx)
{
    return _GenerationCount > _Threshold && idx < _Columns * _Rows * (_GenerationCount - _Threshold);
}

// 崩壊させるセルの一番上の世代かどうか
bool is_collapses_top(uint idx)
{
    return is_collapses(idx) && idx > _Columns * _Rows * (_GenerationCount - (_Threshold + 1));
}

// 次世代のセルを計算する
void calc_new_cell(uint idx)
{
    Cell cell = CellBuffer[idx];
    
    int nextIdx = idx + _Columns * _Rows;
    Cell nextCell = CellBuffer[nextIdx];

    int column = idx % _Columns;
    int row = idx / _Columns;

    // セルの状態と近隣のセルを見て次世代のセルの状態を決定する
    int neighbors = 0;
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            int neighborIdx, neighborColumn, neighborRow;
            if (column + i == -1)
                neighborColumn = _Columns - 1;
            else if (column + i == _Columns)
                neighborColumn = 0;
            else
                neighborColumn = column + i;

            if (row + j == -1)
                neighborRow = _Rows - 1;
            else if (row + j == _Rows)
                neighborRow = 0;
            else
                neighborRow = row + j;

            neighborIdx = neighborRow * _Columns + neighborColumn;
            neighbors += CellBuffer[neighborIdx].state;
        }
    }

    neighbors -= cell.state;
    
    if ((cell.state == 1) && (neighbors < 2))
        nextCell.state = 0;
    else if ((cell.state == 1) && (neighbors > 3))
        nextCell.state = 0;
    else if ((cell.state == 0) && (neighbors == 3))
        nextCell.state = 1;
    else
        nextCell.state = cell.state;

    // 誕生
    if (cell.state == 0 && nextCell.state == 1)
        nextCell.color = _BirthColor;
        // 維持：生の継続
    else if (nextCell.state == 1)
        nextCell.color = _StayAliveColor;
        // 死
    else if (cell.state == 1 && nextCell.state == 0)
        nextCell.color = _DeathColor;
        // 死の継続
    else
        nextCell.color = float4(0, 0, 0, 0);

    // 次世代のセルを光らせる
    nextCell.emission = _Emission;
    
    CellBufferWrite[nextIdx] = nextCell;
}

// 古い世代のセルを更新する
void update_old_cell(uint idx)
{
    Cell cell = CellBuffer[idx];

    // 崩壊するセルを更新
    if (is_collapses(idx))
    {
        cell.velocity += _Gravity;
        cell.velocity *= _Drag;
        cell.position += cell.velocity * _GenerationCount / _Generation;
        cell.scale = max(cell.scale - _DeltaTime * 0.05, 0.5);

        // 地面に地面にぶつかると跳ね返る
        if (cell.position.y < 0)
        {
            cell.position.y = 0;
            cell.velocity.y *= -1;
        }
    }

    // 崩壊する段のトップのみ光らせる
    if (is_collapses_top(idx))
        cell.emission = _Emission;
    else
        cell.emission = float4(0, 0, 0, 0);

    CellBufferWrite[idx] = cell;
}

// 現在までの世代のセルを更新する
// また現世代のセルの状態から、次世代のセルを計算する
[numthreads(10, 1, 1)]
void UpdateCell(uint3 id : SV_DispatchThreadID)
{
    if (id.x <= get_cell_count())
    {
        update_old_cell(id.x);

        if (is_generation_top(id.x))
        {
            calc_new_cell(id.x);
        }
    }
}
